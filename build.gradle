buildscript {
    ext {
        kotlinVersion = '1.3.11'
        springBootVersion = '2.1.0.RELEASE'
        springAutoRestDocsVersion = '2.0.3'
        dokkaVersion = '0.9.17'
        gradleDockerVersion = '1.2'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")

        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.9")
        classpath("org.jetbrains.dokka:dokka-gradle-plugin:${dokkaVersion}")

        classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
    }
}

ext {
    snippetsDir = file("$buildDir/generated-snippets")
    javadocJsonDir = file("$buildDir/generated-javadoc-json")
}


subprojects {

    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    apply plugin: 'org.asciidoctor.convert'
    apply plugin: "org.jetbrains.dokka"

    apply plugin: 'docker'

    group = 'com.exiasoft'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = 1.8

    compileJava {
        targetCompatibility = '1.8'
    }
    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    jar {
        // Need this for subprojects to reference each other
        enabled=true
    }
    docker {
        useApi true
        hostUrl 'http://localhost:2375'
    }
    task cleanAll {
        dependsOn ":itscommon:clean", ":itscommon-test:clean",
                ":itsdiscovery:clean", ":itsconfig:clean", ":itsauthen-client:clean", ":itsauthen:clean",
                ":itsstaticdata:clean", ":itsstaticdata-client:clean", ":itsaccount:clean", ":itsorder:clean",
                ":itsmarketdata:clean", ":itsgateway:clean", ":itsmonolith:clean"
    }
    task buildDocker(type: Docker, dependsOn: bootJar) {
        push = false
        applicationName = jar.baseName
        baseImage = 'openjdk:8-jdk-alpine'
        volume('/tmp')
        addFile {
            from jar
            rename {'app.jar'}
        }
        entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
        // exposePort(8080)
    }
    task buildDockerAll {
        dependsOn ":itsdiscovery:buildDocker", ":itsconfig:buildDocker", ":itsauthen:buildDocker",
                ":itsstaticdata:buildDocker", ":itsaccount:buildDocker", ":itsorder:buildDocker",
                ":itsmarketdata:buildDocker", ":itsgateway:buildDocker", ":itsmonolith:buildDocker"
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
    }

    ext {
        springCloudVersion = 'Greenwich.RELEASE'
        springAutoRestDocsVersion = '2.0.3'
    }

    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-actuator")
        implementation("org.springframework.boot:spring-boot-starter-webflux")
        implementation("org.springframework.cloud:spring-cloud-starter")

        implementation("org.springframework.data:spring-data-commons:2.1.4.RELEASE")
        implementation("io.github.microutils:kotlin-logging:1.6.20")

        // Start for Tomcat 9 + JDK 10
        implementation("javax.xml.bind:jaxb-api:2.3.1")
        implementation("com.sun.xml.bind:jaxb-impl:2.3.1")
        implementation("org.glassfish.jaxb:jaxb-runtime:2.3.1")
        implementation("javax.activation:activation:1.1.1")
        // End for Tomcat 9 + JDK 10
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        implementation("org.jetbrains.kotlin:kotlin-reflect")
        implementation("com.thoughtworks.xstream:xstream:1.4.10")
        implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.7")

        runtime("ch.qos.logback:logback-core:1.2.3")
        runtime("ch.qos.logback:logback-classic:1.2.3")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation('io.projectreactor:reactor-test')
        testImplementation('org.junit.jupiter:junit-jupiter-api')
        testImplementation('org.junit.jupiter:junit-jupiter-params')
        testImplementation('org.junit.platform:junit-platform-runner')
        testRuntime('org.junit.jupiter:junit-jupiter-engine')
        testRuntime('org.junit.platform:junit-platform-engine')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

}
